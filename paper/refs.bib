@article{10.1007/s10844-010-0148-x,
  author  = {Shabtai, Asaf and Kanonov, Uri and Elovici, Yuval and Glezer, Chanan and Weiss, Yael},
  year    = {2012},
  month   = {02},
  pages   = {161-190},
  title   = {"Andromaly": A behavioral malware detection framework for android devices},
  volume  = {38},
  journal = {J. Intell. Inf. Syst.},
  doi     = {10.1007/s10844-010-0148-x}
}
@inproceedings{10.1109/PST.2017.00037,
  author    = {Bkakria, Anis and Graa, Mariem and Cuppens-Boulahia, Nora and Cuppens, Frédéric and Lanet, Jean-Louis},
  year      = {2017},
  month     = {08},
  pages     = {253-2535},
  title     = {Real-Time Detection and Reaction to Activity Hijacking Attacks in Android Smartphones (Short Paper)},
  doi       = {10.1109/PST.2017.00037},
  booktitle = {Proceedings of the 15th Annual Conference on Privacy, Security and Trust (PST)}
}
@inproceedings{10.1109/TrustCom50675.2020.00195,
  author    = {Kouliaridis, Vasileios and Kambourakis, Georgios and Peng, Tao},
  year      = {2020},
  month     = {12},
  title     = {Feature Importance in Android Malware Detection},
  doi       = {10.1109/TrustCom50675.2020.00195},
  booktitle = {2020 IEEE 19th International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom)},
  volume    = {},
  number    = {},
  pages     = {1449-1454}
}
@inproceedings{10.1145/2480362.2480701,
  author    = {Spreitzenbarth, Michael and Freiling, Felix and Echtler, Florian and Schreck, Thomas and Hoffmann, Johannes},
  title     = {Mobile-Sandbox: Having a Deeper Look into Android Applications},
  year      = {2013},
  month     = {03},
  isbn      = {9781450316569},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  doi       = {10.1145/2480362.2480701},
  abstract  = {Smartphones in general and Android in particular are increasingly shifting into the focus of cybercriminals. For understanding the threat to security and privacy it is important for security researchers to analyze malicious software written for these systems. The exploding number of Android malware calls for automation in the analysis. In this paper, we present Mobile-Sandbox, a system designed to automatically analyze Android applications in two novel ways: (1) it combines static and dynamic analysis, i.e., results of static analysis are used to guide dynamic analysis and extend coverage of executed code, and (2) it uses specific techniques to log calls to native (i.e., "non-Java") APIs. We evaluated the system on more than 36,000 applications from Asian third-party mobile markets and found that 24% of all applications actually use native calls in their code.},
  booktitle = {Proceedings of the 28th Annual ACM Symposium on Applied Computing},
  pages     = {1808–1815},
  numpages  = {8},
  keywords  = {malware, Android, application analysis},
  location  = {Coimbra, Portugal},
  series    = {SAC '13}
}
@inproceedings{10.1145/2746266.2746271,
  author    = {Schmeelk, Suzanna and Yang, Junfeng and Aho, Alfred},
  title     = {Android Malware Static Analysis Techniques},
  year      = {2015},
  month     = {04},
  isbn      = {9781450333450},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  doi       = {10.1145/2746266.2746271},
  abstract  = {During 2014, Business Insider announced that there are over a billion users of Android worldwide. Government officials are also trending towards acquiring Android mobile devices. Google's application architecture is already ubiquitous and will keep expanding. The beauty of an application-based architecture is the flexibility, interoperability and customizability it provides users. This same flexibility, however, also allows and attracts malware development.This paper provides a horizontal research analysis of techniques used for Android application malware analysis. The paper explores techniques used by Android malware static analysis methodologies. It examines the key analysis efforts used by examining applications for permission leakage and privacy concerns. The paper concludes with a discussion of some gaps of current malware static analysis research.},
  booktitle = {Proceedings of the 10th Annual Cyber and Information Security Research Conference},
  articleno = {5},
  numpages  = {8},
  keywords  = {Malware Analysis, Cyber Security, Java, Static Analysis, Android Application Security},
  location  = {Oak Ridge, TN, USA},
  series    = {CISR '15},
  pages     = {1-8}
}
@inproceedings{10.1145/2931021.2931026,
  author    = {Wang, Yan and Zhang, Hailong and Rountev, Atanas},
  title     = {On the Unsoundness of Static Analysis for Android GUIs},
  year      = {2016},
  month     = {06},
  isbn      = {9781450343855},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  doi       = {10.1145/2931021.2931026},
  abstract  = {Android software presents exciting new challenges for the static analysis community. However, static analyses for Android are typically unsound. This is due to the lack of specification of the Android framework, the continuous evolution of framework features and behavior, and the absence of soundness arguments and studies by program analysis researchers. Our goal is to investigate one important aspect of this problem: the static modeling of control/data flow due to interactions of the user with the application's GUI. We compare the solutions of three existing static analyses - FlowDroid, IccTA, and Gator - with the actual run-time behavior. Specifically, we observe the run-time sequences of callbacks and their parameters, and match them against the static abstractions provided by these analyses. This study provides new insights into the unsoundness of existing analysis techniques. We conclude with open questions and action items for program analysis researchers working in this increasingly important area. },
  booktitle = {Proceedings of the 5th ACM SIGPLAN International Workshop on State Of the Art in Program Analysis},
  pages     = {18–23},
  numpages  = {6},
  keywords  = {Android, soundness, static analysis},
  location  = {Santa Barbara, CA, USA},
  series    = {SOAP 2016}
}
@inproceedings{10.1145/3029806.3029823,
  author    = {McLaughlin, Niall and Martinez del Rincon, Jesus and Kang, BooJoong and Yerima, Suleiman and Miller, Paul and Sezer, Sakir and Safaei, Yeganeh and Trickel, Erik and Zhao, Ziming and Doup\'{e}, Adam and Joon Ahn, Gail},
  title     = {Deep Android Malware Detection},
  year      = {2017},
  month     = {03},
  isbn      = {9781450345231},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  doi       = {10.1145/3029806.3029823},
  abstract  = {In this paper, we propose a novel android malware detection system that uses a deep convolutional neural network (CNN). Malware classification is performed based on static analysis of the raw opcode sequence from a disassembled program. Features indicative of malware are automatically learned by the network from the raw opcode sequence thus removing the need for hand-engineered malware features. The training pipeline of our proposed system is much simpler than existing n-gram based malware detection methods, as the network is trained end-to-end to jointly learn appropriate features and to perform classification, thus removing the need to explicitly enumerate millions of n-grams during training. The network design also allows the use of long n-gram like features, not computationally feasible with existing methods. Once trained, the network can be efficiently executed on a GPU, allowing a very large number of files to be scanned quickly.},
  booktitle = {Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy},
  pages     = {301–308},
  numpages  = {8},
  keywords  = {android, deep learning, malware detection},
  location  = {Scottsdale, Arizona, USA},
  series    = {CODASPY '17}
}
@inproceedings{10.1145/3029806.3029825,
  author    = {Suarez-Tangil, Guillermo and Dash, Santanu Kumar and Ahmadi, Mansour and Kinder, Johannes and Giacinto, Giorgio and Cavallaro, Lorenzo},
  title     = {DroidSieve: Fast and Accurate Classification of Obfuscated Android Malware},
  year      = {2017},
  isbn      = {9781450345231},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3029806.3029825},
  doi       = {10.1145/3029806.3029825},
  abstract  = {With more than two million applications, Android marketplaces require automatic and scalable methods to efficiently vet apps for the absence of malicious threats. Recent techniques have successfully relied on the extraction of lightweight syntactic features suitable for machine learning classification, but despite their promising results, the very nature of such features suggest they would unlikely--on their own--be suitable for detecting obfuscated Android malware. To address this challenge, we propose DroidSieve, an Android malware classifier based on static analysis that is fast, accurate, and resilient to obfuscation. For a given app, DroidSieve first decides whether the app is malicious and, if so, classifies it as belonging to a family of related malware.DroidSieve exploits obfuscation-invariant features and artifacts introduced by obfuscation mechanisms used in malware. At the same time, these purely static features are designed for processing at scale and can be extracted quickly.For malware detection, we achieve up to 99.82% accuracy with zero false positives; for family identification of obfuscated malware, we achieve 99.26% accuracy at a fraction of the computational cost of state-of-the-art techniques.},
  booktitle = {Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy},
  pages     = {309–320},
  numpages  = {12},
  keywords  = {classification, security, machine learning, malware family identification, android malware detection, native code, obfuscation, scalability},
  location  = {Scottsdale, Arizona, USA},
  series    = {CODASPY '17}
}
@inproceedings{10.1145/3150376.3150378,
  author    = {Bulazel, Alexei and Yener, Bülent},
  year      = {2017},
  month     = {11},
  pages     = {1-21},
  title     = {A Survey On Automated Dynamic Malware Analysis Evasion and Counter-Evasion: PC, Mobile, and Web},
  doi       = {10.1145/3150376.3150378},
  booktitle = {Proceedings of the 1st Reversing and Offensive-oriented Trends Symposium}
}
@inproceedings{10.1145/3290480.3290493,
  author    = {Liu, Xiaojian and Dong, Xiaofeng and Lei, Qian},
  title     = {Android Malware Detection Based on Multi-Features},
  year      = {2018},
  month     = {11},
  isbn      = {9781450365673},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  doi       = {10.1145/3290480.3290493},
  abstract  = {With the widespread use of the Android system, the number of malicious Android applications increases sharply. How to effectively identify malware and improve the successful detection of malicious code becomes increasingly important. Traditionally, the detection technologies mainly focuse on the analysis of a single feature, and can not fully utilize the role of multiple types of features on Android malicious code. In this article, we first study the difference between the resource features of malicious applications and normal applications, and then propose an approach to detecting Android malicious code by combining permissions and API features with resource features. The experiments show that the accuracy of this method is better than the methods of using the permissions or API features alone, it will effectively compensate for the insufficiency of the traditional detection methods, and thus can be used effectively to detect Android malicious applications.},
  booktitle = {Proceedings of the 8th International Conference on Communication and Network Security},
  pages     = {69–73},
  numpages  = {5},
  keywords  = {Android application, Malicious code detection, APK, Machine learning, Resource},
  location  = {Qingdao, China},
  series    = {ICCNS 2018}
}
@inproceedings{9251198,
  author    = {Mahdavifar, Samaneh and Abdul Kadir, Andi Fitriah and Fatemi, Rasool and Alhadidi, Dima and Ghorbani, Ali A.},
  booktitle = {2020 IEEE Intl Conf on Dependable, Autonomic and Secure Computing, Intl Conf on Pervasive Intelligence and Computing, Intl Conf on Cloud and Big Data Computing, Intl Conf on Cyber Science and Technology Congress (DASC/PiCom/CBDCom/CyberSciTech)},
  title     = {Dynamic Android Malware Category Classification using Semi-Supervised Deep Learning},
  year      = {2020},
  volume    = {},
  number    = {},
  pages     = {515-522},
  doi       = {10.1109/DASC-PICom-CBDCom-CyberSciTech49142.2020.00094}
}
@misc{apktool,
  author       = {Tumbleson, Connor and Wiśniewski, Ryszard},
  title        = {Apktool},
  howpublished = {\url{https://ibotpeaches.github.io/Apktool/}},
  year         = {2010--2020}
}
@article{RAZGALLAH2021100358,
  title    = {A survey of malware detection in Android apps: Recommendations and perspectives for future research},
  journal  = {Computer Science Review},
  volume   = {39},
  pages    = {100358},
  year     = {2021},
  issn     = {1574-0137},
  doi      = {https://doi.org/10.1016/j.cosrev.2020.100358},
  url      = {https://www.sciencedirect.com/science/article/pii/S1574013720304585},
  author   = {Asma Razgallah and Raphaël Khoury and Sylvain Hallé and Kobra Khanmohammadi},
  keywords = {Malware detection, Android security, Security},
  abstract = {Android has dominated the smartphone market and has become the most popular operating system for mobile devices. However, security threats in Android applications have also increased in lockstep with Android’s success. More than 3 million new malware samples, targeting the Android operating system were discovered in 2017. Although persistent research efforts have been to address these threats and several detection techniques and tools have been developed as a result, they all exhibit distinct limitations such that no single solution can claim to solve the Android malware problem. In this paper, we survey the main mechanisms and approaches for malware detection in Android applications. We identify the advantages and limitations of each and suggest avenues of research to advance knowledge in this regard.}
}